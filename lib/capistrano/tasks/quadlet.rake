# frozen_string_literal: true

# lib/capistrano/tasks/quadlet.rake
require 'erb'

namespace :quadlet do
  desc 'Generate Quadlet container file locally'
  task :generate do
    template_path = "#{fetch(:quadlet_container_file)}.erb"
    template = ERB.new(File.read(template_path))
    result = template.result(binding)
    # puts "Generated Quadlet file:\n#{result}"  # Debugging
    File.write(fetch(:quadlet_container_file), result)
  end

  desc 'Upload Quadlet container file'
  task :upload do
    invoke 'quadlet:generate'
    on roles(:app) do
      # Ensure the user's Quadlet directory exists
      execute :mkdir, '-p', fetch(:systemd_unit_dir)

      upload! fetch(:quadlet_container_file), fetch(:systemd_unit_dir)
    end
    invoke 'quadlet:daemon_reload'
  end

  desc 'Reload the user daemon'
  task :daemon_reload do
    on roles(:app) do
      execute :systemctl, '--user daemon-reload'
    end
  end

  desc 'Start the systemd service (generated by Quadlet)'
  task :start do
    on roles(:app) do
      execute :loginctl, 'enable-linger'
      execute :systemctl, '--user', :start, fetch(:quadlet_container_service_name)
    end
  end

  desc 'Stop and disable the systemd service (generated by Quadlet)'
  task :disable do
    on roles(:app) do
      execute :systemctl, '--user', :disable, fetch(:quadlet_container_service_name), '--now'
      execute :loginctl, 'disable-linger'
    end
  end

  desc 'Restart the systemd service (generated by Quadlet)'
  task :restart do
    on roles(:app) do
      execute :systemctl, '--user', :restart, fetch(:quadlet_container_service_name)
    end
  end

  desc 'Remove the systemd Quadlet file'
  task remove: :disable do
    on roles(:app) do
      execute :rm, '-f', File.join(fetch(:systemd_unit_dir), fetch(:quadlet_container_name))
    end
    invoke 'quadlet:daemon_reload'
  end
end

# Hooks
after 'deploy:updating', 'quadlet:upload'
after 'deploy:updated', 'quadlet:start'
